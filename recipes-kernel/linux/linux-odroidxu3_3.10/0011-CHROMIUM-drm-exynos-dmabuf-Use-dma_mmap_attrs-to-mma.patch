From e3838cb3a726b3264bf33a3f5701e518b744eb03 Mon Sep 17 00:00:00 2001
From: Javier Martin <Javier.Martin@arm.com>
Date: Thu, 27 Feb 2014 04:58:28 +0000
Subject: [PATCH 11/20] CHROMIUM: drm/exynos/dmabuf: Use dma_mmap_attrs to mmap
 exported GEM buffer

The dmabuf common layer calls the exporter's mmap callback (a) via
dma_buf_mmap_internal when userspace directly calls mmap() on a dmabuf's
fd, or (b) when another kernel driver calls dma_buf_mmap().

In particular, kbase's mmap() handler calls dma_buf_mmap() for any type
BASE_TMEM_IMPORT_TYPE_UMM regions.

Exynos drm's gem objects are allocated with dma_alloc_attrs().
Thus, we can use dma_mmap_attrs() to mmap it to a given vma.

Note: If is_drm_iommu_supported(), the cookie returned by
dma_alloc_attrs() is stored in buf->pages, otherwise, it is stored in
buf->kvaddr.  In either case, it is important to use the correct cookie
when doing the mmap.

This patch fixes the fact that each scatterlist entry may refer to a range
of pages, not just a single page.  Thus for each scatterlist entry we
would actually need to further iterate over all of its pages and insert
them individually using vm_insert_page(), and not just insert the first
one.

In fact, its much simpler to let dma_mmap_attrs() handle the details for
us.

Signed-off-by: Guillaume Tucker <guillaume.tucker@arm.com>
---
 drivers/gpu/drm/exynos/exynos_drm_dmabuf.c | 29 +++++++----------------------
 1 file changed, 7 insertions(+), 22 deletions(-)

diff --git a/drivers/gpu/drm/exynos/exynos_drm_dmabuf.c b/drivers/gpu/drm/exynos/exynos_drm_dmabuf.c
index 739f593..d7b7e22 100644
--- a/drivers/gpu/drm/exynos/exynos_drm_dmabuf.c
+++ b/drivers/gpu/drm/exynos/exynos_drm_dmabuf.c
@@ -14,6 +14,7 @@
 #include "exynos_drm_dmabuf.h"
 #include "exynos_drm_drv.h"
 #include "exynos_drm_gem.h"
+#include "exynos_drm_iommu.h"
 
 #include <linux/dma-buf.h>
 
@@ -167,29 +168,13 @@ static int exynos_gem_dmabuf_mmap(struct dma_buf *dma_buf,
 {
 	struct exynos_drm_gem_obj *exynos_gem_obj = dma_buf->priv;
 	struct exynos_drm_gem_buf *buffer = exynos_gem_obj->buffer;
-	unsigned long uaddr = vma->vm_start;
-	int ret;
+	struct drm_gem_object *obj = &exynos_gem_obj->base;
+	struct drm_device *drm_dev = obj->dev;
+	void *cookie = is_drm_iommu_supported(drm_dev) ?
+			buffer->pages : buffer->kvaddr;
 
-	if (exynos_gem_obj->flags & EXYNOS_BO_NONCONTIG) {
-		unsigned long i = 0;
-		struct scatterlist *sgl;
-
-		if (!buffer->sgt)
-			return -EINVAL;
-		sgl = buffer->sgt->sgl;
-
-		while (i < buffer->sgt->nents) {
-			ret = vm_insert_page(vma, uaddr, sg_page(sgl));
-			if (ret) {
-				DRM_ERROR("failed to remap user space.\n");
-				return ret;
-			}
-			sgl = sg_next(sgl);
-			uaddr += PAGE_SIZE;
-			i++;
-		}
-	}
-	return 0;
+	return dma_mmap_attrs(drm_dev->dev, vma, cookie, buffer->dma_addr,
+			buffer->size, &buffer->dma_attrs);
 }
 
 static struct dma_buf_ops exynos_dmabuf_ops = {
-- 
1.9.1

